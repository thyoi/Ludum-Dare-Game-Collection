[gd_resource type="Shader" format=2]

[resource]
code = "shader_type canvas_item;

	uniform float size;
	uniform float tw;
	uniform float th;
	uniform vec4 c;
	uniform float r;
	
	
	float map(float a){
		return a*a;
	}
	
	bool disf(vec2 d, float a,float s,float rr){
		float tem = (d.x*d.x+d.y*d.y)*rr /s/s;
		return tem*tem*tem<map(a);
	}

	  
	void fragment(){
	//vec2 Size = vec2(float(tw)*TEXTURE_PIXEL_SIZE.x,float(th)*TEXTURE_PIXEL_SIZE.y);
	vec2 p = vec2(UV.x/TEXTURE_PIXEL_SIZE.x,UV.y/TEXTURE_PIXEL_SIZE.y);
	vec2 center = vec2((floor(p.x/size)+0.5)*size,(floor(p.y/size)+0.5)*size);
	vec2 centerUV = vec2(center.x/float(tw),center.y/float(th));
	vec2 sp = TEXTURE_PIXEL_SIZE*size;
	vec4 color = texture(TEXTURE,centerUV );
	vec4 colorU = texture(TEXTURE,centerUV+vec2(0.0,sp.y));
	vec4 colorD = texture(TEXTURE,centerUV+vec2(0.0,-sp.y));
	vec4 colorL = texture(TEXTURE,centerUV+vec2(-sp.x,0.0)); 
	vec4 colorR = texture(TEXTURE,centerUV+vec2(sp.x,0.0));
	vec2 offset = vec2((colorR.a-colorL.a),(colorU.a-colorD.a))*(1.0-color.a)*size/2.0;
	//COLOR.b=0.0;
	vec2 d = vec2(p.x-center.x,p.y-center.y);
	d-=offset;
	vec2 dU = vec2(d.x,d.y-size);
	vec2 dD = vec2(d.x,d.y+size);
	vec2 dL = vec2(d.x+size,d.y);
	vec2 dR = vec2(d.x-size,d.y);
	if(disf(d,color.a,size,r) || disf(dU,colorU.a,size,r)||disf(dD,colorD.a,size,r)||disf(dL,colorL.a,size,r)||disf(dR,colorR.a,size,r)){
		COLOR = vec4(c.r,c.g,c.b,1) 
	}
	else{
		COLOR = vec4(0,0,0,0)
	}
	
}"
